/*!
 * snippet <https://github.com/jonschlinkert/snippet>
 *
 * Copyright (c) 2015, Jon Schlinkert.
 * Licensed under the MIT License.
 */

'use strict';

var fs = require('fs');
var path = require('path');
var mkdir = require('mkdirp');
var omit = require('object.omit');
var DataStore = require('data-store');
var visit = require('collection-visit');
var startsWith = require('starts-with');
var isObject = require('isobject');
var set = require('set-value');
var get = require('get-value');
var Snippet = require('./lib/snippet');

/**
 * Logging
 */

var success = require('success-symbol');
var error = require('error-symbol');
var green = require('ansi-green');
var red = require('ansi-red');
var bold = require('ansi-bold');

// var Generate = require('generate');


function Snippets(options) {
  // Generate.call(this, options);
  this.options = options || {};
  this.store = store(this.options);
  this.snippets = {};
  this.cache = {};
  this.cache.data = {};

  if (typeof this.options.templates === 'object') {
    this.visit('set', this.options.templates);
  }
}

// Generate.extend(Snippets);

/**
 * Snippets prototype methods
 */

Snippets.prototype = {
  constructor: Snippets,

  save: function (prop, val) {
    if (typeof prop === 'object') {
      return this.visit('set', prop);
    }
    this.store.set(prop, val);
    return this;
  },

  data: function (prop, value) {
    if (typeof prop === 'string' && arguments.length === 1) {
      return get(this.cache.data, prop);
    }
    if (typeof prop === 'object') {
      this.visit('data', prop);
      return this;
    }
    set(this.cache.data, prop, value);
    return this;
  },

  set: function (prop, val) {
    if (typeof prop === 'object') {
      return this.visit('set', prop);
    }
    set(this.snippets, prop, val);
    return this;
  },

  get: function (prop) {
    if(typeof prop !== 'string') {
      throw new TypeError('snippets#get expects `prop` to be a string.');
    }
    if (startsWith(prop, './')) {
      return this.read(prop);
    }
    if (/^\w+:\/\//.test(prop)) {
      return this.fetch(prop);
    }
    var val = this.store.get(prop) || get(this.snippets, prop);
    return new Snippet(val);
  },

  fetch: function (url) {

  },

  read: function (snippet) {
    if(typeof snippet === 'string') {
      snippet = new Snippet({path: snippet});
    }
    return snippet.read();
  },

  expand: function (str, data) {
    // return emmet.expandAbbreviation(str);
  },

  prepend: function (str, content) {
    return utils.prepend(str, content);
  },

  append: function (str, content) {
    return utils.prepend(str, content);
  },

  inject: function (str, content, marker) {
    return utils.inject(str, content, marker);
  },

  del: function (prop) {
    this.store.del(prop);
    omit(this.snippets, prop);
    return this;
  },

  mixin: function (key, val) {
    Snippets.prototype[key] = val;
    return this;
  },

  visit: function (method, val) {
    visit(this, method, val);
    return this;
  }
};

function store(options) {
  options = options || {};
  return new DataStore('snippets', options.store || {});
}

/**
 * Expose `Snippets`
 */

module.exports = Snippets;

/**
 * Expose constructors
 */

module.exports.Snippet = Snippet;
